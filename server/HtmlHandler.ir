::
  @ctxt\RequestContext\$

:SCRIPT_LOAD = '<script>run_scrawler();</script>'
:OPEN_MARKER = '<!--%'
:CLOSE_MARKER = '%-->'
:TEMPLATE = 'static/page.html'

:@template\?s\
  if !_path.existsSync(%.HtmlHandler.TEMPLATE)
    @ctxt.response(500, %.HtmlHandler.TEMPLATE + ' not found')
    => null
  => _fs.readFileSync(%.HtmlHandler.TEMPLATE, 'utf8')

:post
  // TODO: handle sub-dirs.
  tmpl := @template()
  if tmpl === null
    =>
  data := ''
  @ctxt.req.setEncoding('utf8')
  @ctxt.req.on('data', ##)
    chunk\s\$
    data += chunk
  @ctxt.req.once('end', ##)
    @ctxt.tryWithResponse(##)
      html := _ejs.render(\s\(tmpl), {contents: data})
      @ctxt.res.writeHead(200)
      _fs.writeFileSync(_path.join('data', @ctxt.path), html)

:packageList\s\
  code\CodeHandler\$
  => #+
    '<script>\n'
    code.pkgList.map(##).join('')
      line\s\$
      => line + '\n'
    '</script>\n'

:scriptList\s\
  code\CodeHandler\$
  => code.scriptList.map(##).join('')
    file\s\$
    => '<script src="/_s/' + file + '"></script>\n'

:replaceScript
  html\s\$
  code\CodeHandler\$
  try
    => _ejs.render(html, {#})
      open: %.HtmlHandler.OPEN_MARKER
      close: %.HtmlHandler.CLOSE_MARKER
      script: #+
        @.packageList(code)
        @.scriptList(code)
      init: %.HtmlHandler.SCRIPT_LOAD
  catch e
    log(e.stack)
    => html

:create
  code\CodeHandler\$
  tmpl := @template()
  if tmpl === null
    =>
  @ctxt.tryWithResponse(##)
    html := _ejs.render(#, {#})
      _ejs.render(\s\(tmpl), {contents: ''})
      --
      open: %.HtmlHandler.OPEN_MARKER
      close: %.HtmlHandler.CLOSE_MARKER
      script: #+
        @.packageList(code)
        @.scriptList(code)
      init: %.HtmlHandler.SCRIPT_LOAD
    @ctxt.res.writeHead(200, {'Content-Type': 'text/html'})
    @ctxt.res.write(html)
