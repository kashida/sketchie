Convenience wrapper for the html canvas.
::
  // If two values, (width, height).  if one value, (canvas_element).
  // x and y, if provided, specify the logical position of this canvas in
  // document coords.
  canvas_or_w\HTMLCanvasElement|n\$
  h\n\?
  @canvas+\HTMLCanvasElement\
  @ctx+\CanvasRenderingContext2D\
  if h
    @canvas = create('canvas')
    @canvas.width = canvas_or_w
    @canvas.height = h
  else
    @canvas = \HTMLCanvasElement\(canvas_or_w)
  @ctx = @canvas.getContext('2d')
  @scale = 1.0

:clear
  @ctx.clearRect(0, 0, @canvas.width, @canvas.height)

:dataUrl
  => @canvas.toDataURL()

:setScale
  scale\n\$
  @scale = scale
  @canvas.width = @canvas.clientWidth / @scale
  @canvas.height = @canvas.clientHeight / @scale

:pixels\ImageData\
  => @ctx.getImageData(0, 0, @canvas.width, @canvas.height)

:copyImage
  img\Image\$
  img_pos\data.Vec2\$
  if !img
    =>
  %.xformDrawImage(#)
    @ctx
    img
    f_viewport.itemToSurface(img_pos)

:duplicateCanvas
  cvs := create('canvas')
  cvs.width = @canvas.width
  cvs.height = @canvas.height
  cvs.getContext('2d').putImageData(@.pixels(), 0, 0)
  => cvs

:copyCanvas
  cvs\!HTMLCanvasElement\$
  @ctx.putImageData(cvs.getContext('2d').getImageData(#), 0, 0)
    0
    0
    @canvas.width
    @canvas.height
