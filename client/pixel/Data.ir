Wrapper of HTML's ImageData.
::
  @pixels+\ImageData\$

:width+\n\
  => @pixels.width
:height+\n\
  => @pixels.height

:positioned\~PositionedPixels|-\
  offset\\? $data.Vec2(0, 0)
  rect := @.tightBound()
  if !rect
    => null
  => &~PositionedPixels(#)
    rect.p00.plus(offset)
    @.urlWithCrop(rect)

:urlWithCrop\s\
  // Coords relative to @pixels.
  rect\$data.Rect\$
  w := rect.w + 1
  h := rect.h + 1
  cvs := $dom.Canvas.fromSize(w, h)
  cvs.ctx.putImageData(@pixels, -rect.x0, -rect.y0, rect.x0, rect.y0, w, h)
  => cvs.dataUrl()

Finds the rectangle in the image where @pixels actually have colors.
Resulting coordinates are relative to the @pixels.
:tightBound\$data.Rect|-\
  miny := minx := maxy := maxx := null
  has_value := ##
    x\n\$
    y\n\$
    // only check alpha.
    => @pixels.data[(x + y * @pixels.width) * 4 + 3] > 0

  // Find the minimum and maximum y values that has any pixel.
  row_has_value := ##
    y\n\$
    for x := 0; x < @pixels.width; x++
      if has_value(x, y)
        => true
    => false
  for y := 0; y < @pixels.height; y++
    if row_has_value(y)
      miny = y
      break
  if miny == null
    => null
  for y = @pixels.height - 1; y >= miny; y--
    if row_has_value(y)
      maxy = y
      break
  if maxy == null
    => null

  // Find the minimum and maximum x values that has any pixel.
  col_has_value := ##
    x\n\$
    for y = miny; y <= maxy; y++
      if has_value(x, y)
        => true
    => false
  for x := 0; x < @pixels.width; x++
    if col_has_value(x)
      minx = x
      break
  if minx == null
    => null
  for x = @pixels.width - 1; x >= minx; x--
    if col_has_value(x)
      maxx = x
      break
  if maxx == null
    => null
  => &$data.Rect(minx, miny, maxx, maxy)
