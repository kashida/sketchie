::<%.Palette
  @mix\!Slider\ &Slider('color_mix', 'mix%', 0, 100, 0, 10)
  @hue\!Slider\ &Slider('color_hue', 'hue%', -300, 300, 0, 10)
  @sat\!Slider\ &Slider('color_sat', 'sat%', -100, 100, 0, 20)
  @lgt\!Slider\ &Slider('color_lgt', 'lgt%', -100, 100, 0, 40)
  @color_sel\Element|data.Hsl\
  @prev_color\data.Hsl\
  ^('color_palette')
  update_cb := ##
    @update()
  @mix.callback_update(update_cb)
  @mix.callback_render(##)
    val\n\$
    => @value_render({m:val / 100})
  @hue.callback_update(update_cb)
  @hue.callback_render(##)
    val\n\$
    => @value_render({h:val / 100})
  @sat.callback_update(update_cb)
  @sat.callback_render(##)
    val\n\$
    => @value_render({s:val / 100})
  @lgt.callback_update(update_cb)
  @lgt.callback_render(##)
    val\n\$
    => @value_render({l:val / 100})
  @create_color_selectors()

:mix_adjust
  incr\n\$
  @mix.adjust(incr)

:hue_adjust
  incr\n\$
  @hue.adjust(incr)

:sat_adjust
  incr\n\$
  @sat.adjust(incr)

:lgt_adjust
  incr\n\$
  @lgt.adjust(incr)

:activate_control
  p\s\$
  (\!Slider\({m: @mix, h:@hue, s:@sat, l:@lgt}[p])).activate()

:unselect
  if @color_sel instanceof Element
    @color_sel.classList.remove('selected')

:select
  if @color_sel instanceof Element
    @color_sel.classList.add('selected')

:@current_color\data.Hsl\
  if @color_sel instanceof Element
    => @color_sel.hsl
  else if @color_sel instanceof data.Hsl
    => @color_sel
  else
    => &data.Hsl(0, 0, 0)
  
:selected_color+\data.Color\
  params := @color_adjust_params()
  => @adjusted_color(#)
    params[0]
    params[1]
    params[2]
    params[3]

:@color_adjust_params
  => [#]
    @hue.value / 100
    @sat.value / 100
    @lgt.value / 100
    @mix.value / 100

:@adjusted_color\data.Color\
  adj_h\n\$
  adj_s\n\$
  adj_l\n\$
  adj_m\n\$
  cc := @current_color()
  a := f_tool_palette ? f_tool_palette.alpha() / 100.0 : 1
  h := (1.0 - adj_m) * cc.h + adj_m * @prev_color.h
  s := (1.0 - adj_m) * cc.s + adj_m * @prev_color.s
  l := (1.0 - adj_m) * cc.l + adj_m * @prev_color.l
  if h
    h += adj_h
  s += adj_s
  l += adj_l
  => &data.Hsl(h, s, l, a).color

:@value_render
  params\O\$
  cap := @color_adjust_params()
  ah := cap[0]
  as := cap[1]
  al := cap[2]
  am := cap[3]
  if params.h
    ah = params.h
  if params.s
    as = params.s
  if params.l
    al = params.l
  if params.m
    am = params.m
  col := @adjusted_color(ah, as, al, am)
  => {c:col.rgb}

:set_color_rgb
  r\n\$
  g\n\$
  b\n\$
  @set_color(data.Color.fromByteRange(r, g, b).hsl)

:@set_color
  hsl\data.Hsl\$
  @mix.reset()
  @hue.reset()
  @sat.reset()
  @lgt.reset()
  @prev_color = @current_color()
  if @color_sel instanceof Element
    @color_sel.classList.remove('selected')
  @color_sel = hsl
  id('color_name').innerText = '---'
  @update()

:swap_colors
  @set_color(@prev_color)

:@create_color_selectors
  colors := [#]
    ['40404F', 'Paynes gray']
    ['36454F', 'Charcoal']
    ['708090', 'Slate gray']
    ['F0EAD6', 'Eggshell']
    ['007FFF', 'Azure']
    ['0047AB', 'Cobalt blue']
    //['1034A6', 'Egyptian blue']
    //['1C39BB', 'Persian blue']
    ['120A8F', 'Ultramarine']
    ['4B0082', 'Indigo']
    ['B57EDC', 'Lavender']
    ['E0B0FF', 'Meuve']
    ['C8A2C8', 'Lilac']
    ['FF00FF', 'Fuchsia']
    ['DA70D6', 'Orchid']
    ['8E4585', 'Plum']
    ['614051', 'Eggplant']
    //['66424D', 'Tuscan red']
    ['722F37', 'Wine']
    ['960018', 'Carmine']
    //['92000A', 'Sangria']
    //['800000', 'Maroon']
    ['DC143C', 'Crimson']
    //['CC3333', 'Persian red']
    ['E34234', 'Vermilion']
    ['FA8072', 'Salmon']
    ['8A3324', 'Burnt umber']
    //['954535', 'Chestnut']
    ['882D17', 'Sienna']
    ['FF7F50', 'Coral']
    //['CB410B', 'Sinopia']
    ['C04000', 'Mahogany']
    ['EC5800', 'Persimmon']
    ['FF7518', 'Pumpkin']
    ['CC7722', 'Ochre']
    ['704214', 'Sepia']
    ['7B3F00', 'Chocolate']
    ['ED9121', 'Carrot orange']
    //['E49B0F', 'Gamboge']
    ['FFBF00', 'Amber']
    ['FFF700', 'Lemon']
    ['808000', 'Olive']
    ['D1E231', 'Pear']
    ['BFFF00', 'Lime']
    ['228B22', 'Forest green']
    ['50C878', 'Emerald']
    ['3EB489', 'Mint']
    ['40826D', 'Viridian']
    ['40E0D0', 'Turquoise']
    ['007BA7', 'Cerulean']
  //verify = &VerifyColors()
  cname := id('color_name')
  csel := id('color_sel')
  colors.forEach(##)
    c\A\$
    i\n\$
    //verify.check c...
    elem := create('div')
    elem.color_name = c[1]
    elem.style['background-color'] = '#' + c[0]
    elem.classList.remove('selected')
    c_values := [0, 1, 2].map(##)
      j\n\$
      => parseInt(c[0].substr(j * 2, 2), 16)
    elem.hsl = data.Color.fromByteRange(c_values[0], c_values[1], c_values[2]).hsl
    // TODO: make just one listener for all the div's.
    listen(elem, 'click', ##)
      evt\Event\$
      @mix.reset()
      @hue.reset()
      @sat.reset()
      @lgt.reset()
      @prev_color = @current_color()
      if @color_sel instanceof Element
        @color_sel.classList.remove('selected')
      @color_sel = \Element\(evt.target)
      cname.innerText = @color_sel.color_name
      @color_sel.classList.add('selected')
      @update()
    csel.appendChild(elem)
    if i == 0
      // Select the first one.
      cname.innerText = c[1]
      elem.classList.add('selected')
      @color_sel = elem
      @prev_color = @current_color()
  @update()

:@update
  id('color_sample0').style['background-color'] = @.selected_color.rgb
  id('color_sample1').style['background-color'] = @prev_color.color.rgb

::VerifyColors
  @last_rgb\A\ null

:check
  col\s\$
  name\s\$
  rgb := colorhex_to_rgb(col)
  if @last_rgb
    distsq := 0
    [0, 1, 2].forEach(##)
      i\n\$
      d := rgb[i] - @last_rgb[i]
      distsq += d * d
  @last_rgb = rgb

Convert hexadecimal color code, e.g. FFFFFF to [r, g, b] value array in
[0, 255] range.
:::colorhex_to_rgb = ##
  hex\s\$
  => [#]
    parseInt(hex.substr(0, 2), 16)
    parseInt(hex.substr(2, 2), 16)
    parseInt(hex.substr(4, 2), 16)
