Canvas that's fixed to the viewport size.
::
  canvas_or_w\HTMLCanvasElement|n\$
  h\n\?
  @canvas\!dom.Canvas\ &dom.Canvas(canvas_or_w, h)

:element+\HTMLCanvasElement\
  => @canvas.element

:context+\CanvasRenderingContext2D\
  => @canvas.ctx

:duplicateCanvas\!HTMLCanvasElement\
  => @canvas.duplicate()

:copyFrom
  cvs\!HTMLCanvasElement\$
  @canvas.copyFrom(cvs)

:clear
  @canvas.clear()

:pixelData+\!pixel.Data\
  => @canvas.pixelData

:attachToImage
  img\!model.Image\$
  img.element.appendChild(@canvas.element)

:attachBeforeElement
  ref_el\Element\$
  ref_el.parentNode.insertBefore(@canvas.element, ref_el)

:detach
  @canvas.element.parentNode.removeChild(@canvas.element)

:activate
  img\model.Image\?
  // Need to match the backing store resolution with logical resolution.
  viewport_scale := f_viewport.scale
  viewport_scale_inverse := 1.0 / viewport_scale
  @canvas.show()
  @canvas.scale = viewport_scale
  @canvas.ctx.save()
  @canvas.ctx.scale(viewport_scale_inverse, viewport_scale_inverse)
  if img
    //xfm.fromItemInverse(img)
    &pixel.XformDrawImage(#).noAlpha()
      @canvas.ctx
      img

  @.updateAlphaLock(!!img && img.alphaLock)

:updateAlphaLock
  alpha_lock\b\$
  @canvas.ctx.globalCompositeOperation = alpha_lock ? 'source-atop' : 'source-over'

:deactivate
  @canvas.clear()
  @canvas.ctx.restore()
  @canvas.hide()
  @canvas.ctx.globalCompositeOperation = ''

Val is the opacity value [0, 1.0], but resets to default when null.
:opacity*
  val\?s|n\$
  @canvas.opacity = val

Takes view coordinates and returns [r, g, b, a] array in [0, 255] range.
:pickColor\data.Color\
  x\n\$
  y\n\$
  scale := f_viewport.scale
  pixels := @canvas.ctx.getImageData(x / scale, y / scale, 1, 1)
  d := pixels.data
  => data.Color.fromByteRange(d[0], d[1], d[2], d[3])

:imageSpec\pixel.PositionedPixels\
  orig_img\!model.Image\?
  // Produce image spec of this surface plus the original image.
  // Size of the image is reduced to the tight bound.
  pixelData := @canvas.pixelData
  => #?
    orig_img
    &pixel.Merge(pixelData, orig_img).pixels()
    pixelData.positioned()
