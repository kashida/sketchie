::<drag.Dragger
  @element\Element\ dom.id('itemlist')
  @onChange+\!NullEvent\ &NullEvent()
  @active\b\ true
  @drag_active\b\ false
  @scale\n\ 1.0
  @offset_x\n\ 0
  @offset_y\n\ 0
  ^()
  @setViewport()
  dom.listen(document.body, 'mousedown', ##)
    evt\Event\$
    @dragStart(evt)

:activate
  @active = true
:deactivate
  @active = false

:reset
  @scale = 1.0
  @offset_x = 0
  @offset_y = 0
  @setViewport()

:scale+\n\
  => @scale

:offset\data.Vec2\
  => &data.Vec2(@offset_x, @offset_y)

:itemToView\!data.Vec2\
  p\data.Vec2\$
  c := &dom.ClientRect().center
  => &data.Vec2(#)
    (p.x + @offset_x - c.x) * @scale + c.x
    (p.y + @offset_y - c.y) * @scale + c.y

:itemToSurface\!data.Vec2\
  p\data.Vec2\$
  c := &dom.ClientRect().center
  => &data.Vec2(#)
    p.x + @offset_x - c.x + c.x / @scale
    p.y + @offset_y - c.y + c.y / @scale

:@viewToItem\!data.Vec2\
  p\data.Vec2\$
  c := &dom.ClientRect().center
  => &data.Vec2(#)
    (p.x - c.x) / @scale - @offset_x + c.x
    (p.y - c.y) / @scale - @offset_y + c.y

:surfaceToItem\!data.Vec2\
  p\data.Vec2\$
  c := &dom.ClientRect().center
  => &data.Vec2(#)
    p.x - @offset_x + c.x - c.x / @scale
    p.y - @offset_y + c.y - c.y / @scale

incr should be -1, 0, or 1 where positive is zooming in
:zoom
  incr\n\$
  if incr > 0
    @scale = @scale * 1.5
  if incr < 0
    @scale = @scale / 1.5
  @setViewport()

:move
  dx\n\$
  dy\n\$
  cr := &dom.ClientRect()
  @offset_x += dx * cr.w / 3 / @scale
  @offset_y += dy * cr.h / 3 / @scale
  @setViewport()

Change offset (but not scaling) to put the item in view.
:showItem
  item\model.Item\$
  // Viewport and the item in item coord space.
  cr := &dom.ClientRect()
  vp0 := @viewToItem(cr.p00)
  vp1 := @viewToItem(cr.p11)
  p0 := item.position
  p1 := item.positionBR

  // Find center positin delta.
  dcx := (vp0.x + vp1.x - p0.x - p1.x) * 0.5
  dcy := (vp0.y + vp1.y - p0.y - p1.y) * 0.5
  // Find the minimum distance we need to move to get the item in the view.
  @offset_x += #?
    dcx > 0
    inrange(0, dcx, vp0.x - p0.x)
    inrange(dcx, 0, vp1.x - p1.x)
  @offset_y += #?
    dcy > 0
    inrange(0, dcy, vp0.y - p0.y)
    inrange(dcy, 0, vp1.y - p1.y)
  @setViewport()

Change scaling and offset to put all the items in view.
:showAllItems
  union := &pixel.UnionRect()
  union.add(f_page.list.childrenArray)
  r := union.rect
  cr := &dom.ClientRect()
  @scale = r.w / r.h > cr.w / cr.h ? cr.w / r.w : cr.h / r.h
  @offset_x = -r.x0 - r.w * 0.5 + cr.w * 0.5
  @offset_y = -r.y0 - r.h * 0.5 + cr.h * 0.5
  @setViewport()

:@setViewport
  c := &dom.ClientRect().center
  @element.style['-webkit-transform'] = [#].join(' ')
    'translate(' + c.x + 'px, ' + c.y + 'px)'
    'scale(' + @scale + ')'
    'translate(' + # + 'px, ' + # + 'px)'
      Math.floor(@offset_x) - c.x
      Math.floor(@offset_y) - c.y
  @onChange.fire()

:copyTo
  div\model.Item\$
  div.style['-webkit-transform'] = @element.style['-webkit-transform']

:@dragStart
  evt\Event\$
  if !@active
    =>
  if !evt.ctrlKey
    =>
  @mouse_x = evt.clientX
  @mouse_y = evt.clientY
  @base_x = @offset_x
  @base_y = @offset_y
  f_dispatcher.dragStart(@)
  evt.preventDefault()
  => true

:<dragUpdate
  evt\Event\$
  if !@active
    =>
  @offset_x = @base_x + (evt.clientX - @mouse_x) / @scale
  @offset_y = @base_y + (evt.clientY - @mouse_y) / @scale
  @setViewport()

:<dragEnd
  evt\Event\$
  if !@active
    =>
  @.dragUpdate(evt)
