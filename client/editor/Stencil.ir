::< %.Image
  @baseImage\model.Image\
  @action\s\ ''
  @.stroke = 'R'
  ^()

:<activate
  if !f_page.selection.isHeadImage
    =>
  @baseImage = \model.Image\(f_page.selection.head)
  f_page.selection.clear()
  @.activateImage(null)
  f_surface.opacity = 0.3

:<deactivate
  mask := f_surface.pixelData.pixels
  ^()
  console.assert(@baseImage)
  f_surface.opacity = null
  f_page.selection.select(\!model.Image\(@baseImage))
  if @action != 'c' && @action != 'x'
    // Canceled.
    =>

  // Carry out the requested action.
  img_spec := &pixel.Region(#).intersection()
    @baseImage
    mask
  if !img_spec
    // no intersection of the image and selection.
    =>

  created_img := img_spec.makeImageItem()
  if @action == 'x'
    rest_spec := &pixel.Region(#).diff()
      @baseImage
      mask
    // We don't need to make any action if the entire image was selected
    // and the operation was cut (not copy).
    if rest_spec
      rest_spec.makeImageItem(@baseImage)
  f_page.selection.select(created_img)
  @baseImage = null
  @action = ''

:<startSegment
  evt\Event\$
  f_strokes.get(f_tool_palette.tool()).reset(#)
    data.Color.fromByteRange(200, 170, 70, 255)
    f_tool_palette.radius()
    f_tool_palette.lerp()
    false

:dispatch
  evt\Event\$
  if evt.keyCode == DOM_VK_ESCAPE || evt.keyCode == c('A')
    f_editor_modes.popMode()

  else if evt.keyCode == DOM_VK_ESCAPE || evt.keyCode == c('C')
    @action = 'c'
    f_editor_modes.popMode()

  else if evt.keyCode == DOM_VK_ESCAPE || evt.keyCode == c('X')
    @action = 'x'
    f_editor_modes.popMode()

  else
    ^(evt)
