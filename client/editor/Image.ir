::<%.Editor
  @undo\dom.UndoImage\ &dom.UndoImage()
  @is_drawing\b\ false
  @stroke&\s\ 'P'
  @prev_stroke\s\ 'E'
  @last_open_palette\s\ 'c'
  @image+\model.Image\
  @alphaLock+\b\ false
  ^()

:startSegment
  evt\Event\$

:activateImage
  img\model.Image\$
  @image = img
  @alphaLock = !!@image && @image.alphaLock

  // TODO: Attaching and activating (which include coord calculation) should be
  // done for surface and stroke_layer at the same time (using a common div,
  // etc) to save work.
  if @image
    f_surface.attachToImage(@image)
    f_stroke_layer.attachToImage(@image)
  else
    cursor_el := dom.id('draw_cursor')
    f_surface.attachBeforeElement(cursor_el)
    f_stroke_layer.attachBeforeElement(cursor_el)
  f_surface.activate(@image)
  f_stroke_layer.activate(@image, false)
  f_viewport.deactivate()
  f_item_palette.close()
  f_dispatcher.pushMouseControl(@)
  f_dispatcher.activate()
  f_tool_palette.setParam(@stroke)
    // setParam doesn't update sample and cursor if the tool doesn't change,
    // but color palette's update does update brush config too.
  f_color_palette.update()

  if @image
    @image.img.style.visibility = 'hidden'

:deactivate
  if @image
    @image.img.style.visibility = ''

  @undo.reset()
  f_viewport.activate()
  f_surface.deactivate()
  f_surface.detach()
  f_stroke_layer.deactivate()
  f_stroke_layer.detach()
  f_dispatcher.deactivate()
  f_cursor.hide()
  f_tool_palette.close()
  f_color_palette.close()

  @image = null

:mouseDown
  evt\Event\$
  if evt.ctrlKey
    f_color_palette.setColorRgb(f_surface.pickColor(evt.clientX, evt.clientY))
    =>
  @undo.push()
  @.startSegment(evt)
  @is_drawing = true
  evt.preventDefault()

:mouseMove
  evt\Event\$
  if @is_drawing
    @drawSegment(evt)
  f_cursor.move(evt.clientX, evt.clientY)
  evt.preventDefault()

:mouseUp
  evt\Event\$
  if @is_drawing
    @endSegment(evt)
    f_stroke_layer.clear()
    @is_drawing = false
  evt.preventDefault()

:mouseOut
  evt\Event\$
  if @is_drawing
    @endSegment(evt)
    f_stroke_layer.clear()
    @is_drawing = false
  f_cursor.hide()

:mouseIn
  evt\Event\$
  @is_drawing = false
  f_cursor.update()

:viewportResize
  evt\Event\$
  // Same as cancel.
  f_editor_modes.popMode()

:@drawSegment
  evt\Event\$
  f_strokes.get(f_tool_palette.tool()).draw(evt.clientX, evt.clientY)

:@endSegment
  evt\Event\$
  f_strokes.get(f_tool_palette.tool()).blit()

:dispatch
  evt\Event\$
  if evt.keyCode == DOM_VK_BACK_SPACE
    @undo.push()
    f_surface.clear()

  else if evt.keyCode == c('Z')
    if !@is_drawing
      @undo.pop()

  else if evt.keyCode == c(' ')
    if @last_open_palette == 'c'
      f_color_palette.toggle()
    else
      f_tool_palette.toggle()

  else if evt.keyCode == c('B')
    @last_open_palette = 'b'
    f_tool_palette.toggle()
    f_color_palette.close()

  else if evt.keyCode == c('C')
    @last_open_palette = 'c'
    f_tool_palette.close()
    f_color_palette.toggle()

  else if evt.keyCode == c('D')
    if @prev_stroke && @stroke != @prev_stroke
      tmp := @stroke
      @stroke = @prev_stroke
      @prev_stroke = tmp
      f_tool_palette.setParam(@stroke)

  else if evt.keyCode == c('V')
    f_z_order.moveToEnd([@image], !evt.shiftKey)
  else if evt.keyCode == c('N')
    if @image
      f_z_order.shiftOne(@image, !evt.shiftKey)

  else if evt.keyCode == c('X')
    @alphaLock = !@alphaLock
    f_surface.updateAlphaLock(@alphaLock)

  else if evt.keyCode == c('F')
    f_color_palette.swapColors()

  //else if evt.keyCode == c('M')
  //  f_color_palette.activateControl('m')
  //else if evt.keyCode == c('H')
  //  f_color_palette.activateControl('h')
  //else if evt.keyCode == c('J')
  //  f_color_palette.activateControl('s')
  //else if evt.keyCode == c('L')
  //  f_color_palette.activateControl('l')

  else if #||
      evt.keyCode == DOM_VK_OPEN_BRACKET
      evt.keyCode == DOM_VK_CLOSE_BRACKET
      --
      incr := evt.keyCode == DOM_VK_CLOSE_BRACKET ? 1 : -1
      if evt.shiftKey && evt.ctrlKey
        f_color_palette.mixAdjust(incr)
      else if evt.shiftKey
        f_color_palette.satAdjust(incr)
      else if evt.ctrlKey
        f_color_palette.hueAdjust(incr)
      else
        f_color_palette.lgtAdjust(incr)

  else if evt.keyCode == DOM_VK_COMMA || evt.keyCode == DOM_VK_PERIOD
      incr := evt.keyCode == DOM_VK_PERIOD ? 1 : -1
      if evt.shiftKey
        f_tool_palette.alphaAdjust(incr)
      else if evt.ctrlKey
        f_tool_palette.lerpAdjust(incr)
      else
        f_tool_palette.sizeAdjust(incr)

  else
    keystr := String.fromCharCode(evt.keyCode)
    if keystr in %.Image.brushKeys
      new_stroke := %.Image.brushKeys[keystr]
      if new_stroke != @stroke
        @prev_stroke = @stroke
        @stroke = new_stroke
        f_tool_palette.setParam(@stroke)

:brushKeys = {#}
    W: 'P'
    E: 'E'
    R: 'B'
    T: 'S'
    Y: 'R'
    U: 'A'
    I: 'I'
    O: 'L'
