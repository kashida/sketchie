::<%.Editor
  @text\model.Text\
  ^()

:<activate\b\
  sub_mode\s\$
  create_new := sub_mode == 'o'
  cursor_top := sub_mode == 'i'

  if create_new
    // Add a text box at the right location and make it visible.
    @text = %.Text.makeTextItem('', f_page.selection.head)
    f_page.items.appendEnd([@text])
    f_page.selection.select(@text)
  else
    if !f_page.selection.isHeadText
      => false
    @text = \!model.Text\(f_page.selection.head)
    f_page.selection.clear()

  if sub_mode == 'c'
    // This is a copy request.
    t := %.Text.makeTextItem(@text.text)
    t.position = @text.position.plus(10)
    f_page.items.appendEnd(t)
    => false

  @text.editable = true
  @text.setCursor(cursor_top)
  => true

:<deactivate
  @text.editable = false
  @text.normalize(true)

:@split
  cursor := window.getSelection()

  // Find the div the cusor is in now.
  until_children := ##
    \n\
    node\Node\$
    pred\f(Node):b\$
    i := 0
    while i < node.childNodes.length
      if pred(node.childNodes[i])
        => i
      i++
    => -1
  remove_and_convert_rest_to_str := ##
    node\Node\$
    index\n\$
    str := ''
    i := index
    while i < node.childNodes.length
      c := node.childNodes[i]
      str += dom.nodeText(c)
      node.removeChild(c)
    => str
  newstr := ''
  // TODO: move the use of @text.element to model.Text.
  cursor_div_index := until_children(@text.element, ##)
    \b\
    c\Node\$
    if c == cursor.anchorNode
      newstr = remove_and_convert_rest_to_str(c, cursor.anchorOffset)
      => true
    if c == cursor.anchorNode.parentNode
      cursor_elem_index := until_children(c, ##)
        \b\
        cc\Node\$
        if cc == cursor.anchorNode
          newstr = cc.nodeValue.substr(cursor.anchorOffset)
          cc.nodeValue = cc.nodeValue.substr(0, cursor.anchorOffset)
          => true
        => false
      newstr += remove_and_convert_rest_to_str(c, cursor_elem_index + 1)
      => true
    => false

  // Move all the rest div's to a new item.
  newtext := %.Text.makeTextItem(newstr, @text)
  newtext.moveChildrenFrom(@text, cursor_div_index + 1)
  f_page.items.appendEnd(newtext)

  // Remove the previous item if there's no text now.
  @text.editable = false
  @text.normalize(true)

  // Activate the new item.
  @text = newtext
  f_page.selection.select(@text)
  @text.normalize(false)
  @text.editable = true
  @text.setCursor(true)

:dispatch
  evt\Event\$
  if evt.keyCode == DOM_VK_RETURN && evt.shiftKey
    @split()

  else if evt.keyCode == DOM_VK_ESCAPE
    f_editor_modes.popMode()

  else if evt.keyCode == DOM_VK_BACK_SPACE
    @text.backspace()

:makeTextItem = ##
  \!model.Text\
  str\s\$
  ref_item\model.Item\?
  t := &model.Text()
  t.text = str
  t.editable = false
  t.position = ref_item ? # : #
    ref_item.position.plus2n(-5, ref_item.rect.h + 2)
    &data.Vec2(window.pageXOffset, window.pageYOffset)
  => t

:collapseSelected = ##
  // Collapse texts in y order.
  // Create an empty text item and add the elements.
  newtext := %.Text.makeTextItem('')
  newtext.emptyChildren()

  is_first := true
  while f_page.selection.isAny
    f_page.items.topIn(f_page.selection.list, ##)
      item\!model.Item\$
      newtext.moveChildrenFrom(item)
      if is_first
        newtext.position = item.position
        is_first = false
      f_page.selection.remove(item)
      f_page.items.remove(item)

  f_page.items.appendEnd(newtext)
  f_page.selection.select(newtext)
