::<%.Editor
  @selection\item.Selection\$
  @textEditor\%.Text\$
  ^()
  f_item_list.each(##)
    e\Element\$
    &%.Item(e, @selection)

:@removeSelected
  f_item_list.remove(@selection.list)
  @selection.clear()

:@zOrderToEnd
  send_back\b\$
  // Preserve the z order among the selected items.
  remove_list := f_item_list.zOrder(@selection.list)
  f_item_list.remove(remove_list)
  if send_back
    f_item_list.insertFirst(remove_list)
  else
    f_item_list.appendEnd(remove_list)

:@zOrderToShift
  send_back\b\$
  // First find a selected item and then find a non-selected item that has
  // overlapping region with one of the selected items.
  found_selected := []
  to_move := []
  found := false
  f_item_list.until(send_back, ##)
    item\Element\$
    if @selection.isSelected(item)
      found_selected.push(item)
    else if found_selected.length > 0
      to_move.push(item)
      if overlapWithAny(item, found_selected)
        // All the non-selected items after the first selected maybe
        // non-overlapping, so we need this flag.
        found = true
        => true
    => false
  if to_move.length > 0 && found
    f_item_list.remove(to_move)
    if send_back
      f_item_list.insertBefore(found_selected[0], to_move)
    else
      f_item_list.insertAfter(found_selected[0], to_move)

:@moveSelection
  move_down\b\$
  // Find the element below the current one and move the selection to it.
  if !@selection.isAny
    // Special case.  we select eithe the first or the last element.
    if move_down
      f_item_list.top(##)
        item\Element\$
        @selection.select(item)
        f_viewport.showItem(item)
    else
      f_item_list.bottom(##)
        item\Element\$
        @selection.select(item)
        f_viewport.showItem(item)
    =>
  if f_item_list.empty()
    =>

  // Find items that is just above and just below the selected item.
  next_item := null
  y := next_y := @selection.head.offsetTop
  f_item_list.each(##)
    c\Element\$
    if c == @selection.head
      =>
    cy := c.offsetTop
    // We want to move up and found an item above the current.
    // this is either the first occurence or that's the closest to the
    // current so far.
    found_above_candidate := #&&
      !move_down
      cy < y
      !next_item || next_y < cy
    // We want to move down and found an item below the current.
    // this is either the first occurence or that's the closest to the
    // current so far.
    found_below_candidate := #&&
      move_down
      cy > y
      !next_item || next_y > cy
    if found_above_candidate || found_below_candidate
      next_item = c
      next_y = cy
  if next_item
    @selection.select(next_item)
    f_viewport.showItem(next_item)

:@expandSelection
  move_down\b\$
  current := @selection.head
  @moveSelection(move_down)
  @selection.add(current)

:@holdSelection
  @selection.list.forEach(##)
    item\Element\$
    item.removeAttribute('active')
    item.style['pointer-events'] = 'none'
  @selection.clear()

:@unholdAll
  f_item_list.each(##)
    item\Element\$
    item.setAttribute('active', '1')
    item.style['pointer-events'] = null

:@copyItem
  // Need to make a copy because @selection.list gets destroyed
  // during the copies.
  @selection.list.slice(0).forEach(##)
    item\Element\$
    if item.tagName == 'DIV'
      @textEditor.copyTextItem(item)
    else
      @copyImageItem(item)

:@collapseItems
  if @selection.count < 2
    =>
  if @selection.isAllText
    @textEditor.collapseTexts()
  else if @selection.isAllImage
    @collapseImages()

------------------------------------------------------------
Image methods.

:@copyImageItem
  orig_item\Element\$
  img := @makeImageItem(&PositionedPixels(#))
    &data.Vec2(orig_item.offsetLeft + 10, orig_item.offsetTop + 10)
    orig_item.src
  setAttr(img, 'xf_r', attr(orig_item, 'xf_r'))
  setAttr(img, 'xf_s', attr(orig_item, 'xf_s'))
  setXform(img)
  setAttr(img, 'alpha_lock', attr(orig_item, 'alpha_lock'))
  f_item_list.appendEnd(img)

:@makeImageItem\Image\
  spec\PositionedPixels\$
  img\Image\?
  add_img := !img
  if img
    // Refresh the transform.
    setAttr(img, 'xf_r')
    setAttr(img, 'xf_s')
    img.style['-webkit-transform'] = null
  else
    img = &Image()
    &%.Item(img, @selection)
  img.style.left = spec.position.x + 'px'
  img.style.top = spec.position.y + 'px'
  img.style['-webkit-user-select'] = 'none'
  img.src = spec.dataUrl
  if add_img
    f_item_list.appendEnd(img)
  @selection.select(img)
  => img

:@enterDrawMode
  if @selection.isHeadText
    @selection.clear()
  img := @selection.head
  @selection.clear()
  if img && attr(img, 'ref_img')
    img = null

  // Move all items after the selected image to a separate div.
  upper_items := img ? f_item_list.after(img) : []
  f_item_list.remove(upper_items)
  div := create('div', {class: 'itemlist itemlist_upper'})
  upper_items.forEach(##)
    item\Element\$
    div.appendChild(item)
  f_viewport.copyTo(div)
  document.body.insertBefore(div, f_cursor.div())

  // Activate.
  f_item_palette.close()
  f_editor_modes.changeModeTo('d', {image:img}, ##)
    params\O\$
    => @drawEnd(#)
      \Image\(img)
      params['img_spec']
      params['alpha_lock']
      params['stencil']

:@drawEnd
  img\Image\$
  img_spec\PositionedPixels\$
  alpha_lock\b\$
  stencil\b\? false
  if !img_spec
    // No image remaining.
    @selection.clear()
    if img
      f_item_list.remove(img)
    => 
  @makeImageItem(img_spec, img)
  setIsAttr(@selection.head, 'alpha_lock', alpha_lock)

  // Remove the temporary div for the upper items.
  div := id('itemlist_upper')
  while div.childNodes.length > 0
    item := div.firstChild
    div.removeChild(item)
    f_item_list.appendEnd(item)
  document.body.removeChild(div)

  if stencil
    @enterStencilMode()

:@enterStencilMode
  if !@selection.isHeadImage
    =>
  img := @selection.head
  @selection.clear()
  f_item_palette.close()
  f_editor_modes.changeModeTo('s', [], ##)
    params\s\$
    @stencilEnd(#)
      \Image\(img)
      params['mask']
      params['action']

:@stencilEnd
  img\Image\$
  mask\ImageData\$
  action\s\$
  @selection.select(img)
  if action != 'c' && action != 'x'
    // Canceled.
    =>

  // Carry out the requested action.
  img_spec := imageRegion(img, mask)
  if !img_spec
    // no intersection of the image and selection.
    =>

  created_img := @makeImageItem(img_spec)
  if action == 'x'
    rest_spec := imageRegion(img, mask, true)
    // We don't need to make any action if the entire image was selected
    // and the operation was cut (not copy).
    if rest_spec
      @makeImageItem(rest_spec, img)
  @selection.select(created_img)

:@collapseImages
  // Collapse images in their z order.
  merged_spec := blendImages(f_item_list.zOrder(@selection.list))
  if !merged_spec
    =>
  // Remove all the selected images.
  f_item_list.remove(@selection.list)
  // Add the newly created image.
  @selection.select(@makeImageItem(merged_spec))
  f_item_palette.update()

:pasteImage
  evt\Event\$
  // Get the image from clipboard.
  url := evt.clipboardData.getData('text/plain')
  if !url
    // The image is copied as html, not as url.
    html := evt.clipboardData.getData('text/html')
    if !html
      =>
    div := create('div')
    div.innerHTML = html
    img := div.getElementsByTagName('img')[0]
    if !img
      =>
    url = img.src
  img = @makeImageItem(&PositionedPixels(#))
    &data.Vec2(window.pageXOffset, window.pageYOffset)
    url
  setAttr(img, 'ref_img', '1')
  f_item_list.appendEnd(img)


------------------------------------------------------------
Key handler.

:dispatch
  evt\Event\$
  shift := 0x100
  key := evt.keyCode
  if evt.shiftKey
    key += shift

  // Selection control.
  if key == c('K')
    @moveSelection(false)
  else if key == c('J')
    @moveSelection(true)
  else if key == c('K') + shift
    @expandSelection(false)
  else if key == c('J') + shift
    @expandSelection(true)
  else if key == DOM_VK_ESCAPE || key == c('A')
    @selection.clear()
  else if key == c('H')
    @holdSelection()
  else if key == c('H') + shift
    @unholdAll()

  // z control.
  else if key == c('V')
    @zOrderToEnd(true)
  else if key == c('V') + shift
    @zOrderToEnd(false)
  else if key == c('N')
    @zOrderToShift(false)
  else if key == c('N') + shift
    @zOrderToShift(true)

  // Transform.
  else if key == c('R')
    f_item_palette.close()
    f_editor_modes.changeModeTo('r')
  else if key == c('T')
    f_item_palette.close()
    f_editor_modes.changeModeTo('q')

  // Copy the selected item.
  else if key == c('C')
    @copyItem()

  // Delete.
  else if key == c('D') + shift
    @removeSelected()

  // Merge items.
  else if key == c('M')
    @collapseItems()

  // Open / close the control palette.
  else if key == c(' ')
    f_item_palette.toggle()

  // Entering to the text mode.
  else if key == c('O')
    @textEditor.addText(true)
  else if key == c('I')
    @textEditor.addText(false, true)
  else if key == c('E')
    @textEditor.addText(false)

  // Draw / stencil mode change.
  else if key == c('D')
    @enterDrawMode()
  else if key == c('S')
    @enterStencilMode()

  // Mark image alpha locked.
  else if key == c('X')
    f_item_palette.toggleAlphaLock()

  // Adjust the image blend alpha.
  else if key == DOM_VK_COMMA + shift || key == DOM_VK_PERIOD + shift
    f_item_palette.blendAlphaAdjust(evt.keyCode == DOM_VK_PERIOD)

  // Zoom in/out.
  else if key == DOM_VK_EQUALS
    f_viewport.zoom(1)
    evt.preventDefault()
  else if key == DOM_VK_MINUS
    f_viewport.zoom(-1)
    evt.preventDefault()
  else if key == c('0')
    f_viewport.reset()
    evt.preventDefault()
  else if key == c('0') + shift
    f_viewport.showAllItems()
    evt.preventDefault()

  // Viewport control.
  else if key == DOM_VK_LEFT
    f_viewport.move(-1, 0)
  else if key == DOM_VK_UP
    f_viewport.move(0, -1)
  else if key == DOM_VK_RIGHT
    f_viewport.move(1, 0)
  else if key == DOM_VK_DOWN
    f_viewport.move(0, 1)

  // Save.
  else if key == c('S') + shift
    @selection.clear()
    f_scrawler.upload()
  // Go back to the list page.
  else if key == c('U') + shift
    window.location.assign('/')
