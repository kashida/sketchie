Global components of the app -- i.e. only one instance in the lifetime of the app.
:~
  /** @type {Scrawler} */
  var f_scrawler;
  /** @type {ui.Viewport} */
  var f_viewport;
  /** @type {ui.Surface} */
  var f_surface;
  /** @type {ui.Surface} */
  var f_stroke_layer;
  /** @type {palette.Color} */
  var f_color_palette;
  /** @type {palette.Tool} */
  var f_tool_palette;
  /** @type {palette.Item} */
  var f_item_palette;
  /** @type {ui.Cursor} */
  var f_cursor;
  /** @type {Dispatcher} */
  var f_dispatcher;
  /** @type {editor.Modes} */
  var f_editor_modes;
  /** @type {ui.HexControl} */
  var f_hex_control;
  /** @type {model.ZOrder} */
  var f_z_order;
  /** @type {stroke.Set} */
  var f_strokes;
  /** @type {action.GlobalSet} */
  var f_global_actions;
  /** @type {model.Page} */
  var f_page;

::Scrawler
  @run_as_extension\b\$
  @buildDom()
  @initGlobalComponents()

:@initGlobalComponents
  f_scrawler = this
  f_viewport = &ui.Viewport()
  f_page = &model.Page()
  f_z_order = &model.ZOrder()
  f_surface = &ui.Surface(dom.create('canvas', {class: 'surface'}))
  f_stroke_layer = &ui.Surface(dom.id('stroke_layer'))
  f_color_palette = &palette.Color()
  f_tool_palette = &palette.Tool()
  f_item_palette = &palette.Item()
  f_cursor = &ui.Cursor()

  f_editor_modes = &editor.Modes('l', {#})
    'l': &editor.List()
    't': &editor.Text()
    'r': &editor.Rotate()
    'q': &editor.Scale()
    'd': &editor.Draw()
    's': &editor.Stencil()
  f_dispatcher = &Dispatcher()
  &KeyDispatcher()
  f_hex_control = &ui.HexControl()
  f_strokes = &stroke.Set()

upload: ->
  chrome.extension.sendRequest ['list'], (resp) ->
    l resp

Server access.
:upload
  // Send everything in the item list.
  html := #+
    '<div class="itemlist">'
    dom.id('itemlist').innerHTML
    '</div>\n'
  if @run_as_extension
    bb := &WebKitBlobBuilder()
    bb.append(saveHeader)
    bb.append(html)
    bb.append(saveFooter)
    //getURL = window.createBlobURL || window.createObjectURL
    ifr := dom.id('save_ifr')
    if !ifr
      ifr = dom.create('iframe')
      ifr.id = 'save_ifr'
      ifr.style.display = 'none'
    ifr.src = window.webkitURL.createObjectURL(bb.getBlob())
    document.body.appendChild(ifr)
  else
    xhrPost(location.pathname, html)

:@buildDom
  f_global_actions := &action.GlobalSet()
  dom.appendChildren(document.body, [#])
    dom.findOrCreate('div', {class: 'itemlist'})
    dom.create('canvas', {class: 'stroke_layer'})
    dom.createDiv('draw_cursor')
    dom.svgCreate('svg', {class: 'control_root'})
    dom.createDiv('input_layer')
    dom.create('form', {}, [dom.createDiv('palette_container', [#])])
      dom.createDiv(['tool_palette', 'palette'], [#])
        dom.createDiv('sample_box', [#])
          dom.create('canvas', {class: 'tool_sample'})
          dom.createDiv('sample_size')
        dom.createDiv('tool_lerp')
        dom.createDiv('tool_alpha')
        dom.createDiv('tool_radius')
      dom.createDiv(['color_palette', 'palette'], [#])
        dom.createDiv('color_sel')
        dom.createDiv('box', [#])
          dom.createDiv(['color_sample0', 'color_sample'])
          dom.createDiv(['color_sample1', 'color_sample'])
          dom.createDiv('color_mix')
          dom.createDiv('color_hue')
          dom.createDiv('color_sat')
          dom.createDiv('color_lgt')
        dom.createDiv('color_name')
      dom.createDiv(['item_palette', 'palette'], [#])
        dom.createDiv('box', [#])
          dom.createDiv('item_alpha')
        dom.createDiv(['image_section', 'palette'], [#])
          dom.createDiv('box', [#])
            dom.createDiv('box', [#])
              dom.create('input', {class: 'image_alph_alock', type: 'checkbox'})
              dom.createText('alpha lock')
    dom.createDiv('img_undolist')
    f_global_actions.element

:'saveHeader
  <!doctype html>
  <html><head>
    <title>Scrawler</title>
    <link rel="stylesheet" href="scrawler.css" type="text/css">
    </head><body>

:'saveFooter
  </body></html>

Entry point.
:
  run_scrawler := ##
    run_as_extension\b\? false
    => &Scrawler(run_as_extension)
