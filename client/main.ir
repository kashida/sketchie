Global components of the app -- i.e. only one instance in the lifetime of the app.
:
  f_scrawler := null
  f_viewport := null
  f_surface := null
  f_stroke_layer := null
  f_color_palette := null
  f_tool_palette := null
  f_item_palette := null
  f_cursor := null
  f_dispatcher := null
  f_editor_modes := null
  f_hex_control := null
  f_z_order := null
  f_strokes := null
  f_global_buttons := null
  f_page := null

::Scrawler
  @run_as_extension\b\$
  @buildDom()
  @initGlobalComponents()

:@initGlobalComponents
  f_scrawler = this
  f_viewport = &Viewport()
  f_page = &model.Page(&item.List(), &item.Selection())
  f_z_order = &item.ZOrder()
  f_surface = &Surface(id('surface'))
  f_stroke_layer = &Surface(id('stroke_layer'))
  f_color_palette = &palette.Color()
  f_tool_palette = &palette.Tool()
  f_item_palette = &palette.Item(f_page.selection)
  f_cursor = &Cursor()

  textEditor := &editor.Text(f_page.selection)
  f_editor_modes = &editor.Modes('l', {#})
    'l': &editor.List(f_page.selection, textEditor)
    't': textEditor
    'r': &editor.Rotate(f_page.selection)
    'q': &editor.Scale(f_page.selection)
    'd': &editor.Draw()
    's': &editor.Stencil()
  f_dispatcher = &Dispatcher()
  &KeyDispatcher()
  f_hex_control = &HexControl()
  f_strokes = &stroke.Set()

upload: ->
  chrome.extension.sendRequest ['list'], (resp) ->
    l resp

Server access.
:upload
  // Send everything in the item list.
  html := #+
    '<div class="itemlist">'
    id('itemlist').innerHTML
    '</div>\n'
  if @run_as_extension
    bb := &WebKitBlobBuilder()
    bb.append(saveHeader)
    bb.append(html)
    bb.append(saveFooter)
    //getURL = window.createBlobURL || window.createObjectURL
    ifr := id('save_ifr')
    if !ifr
      ifr = create('iframe')
      ifr.id = 'save_ifr'
      ifr.style.display = 'none'
    ifr.src = window.webkitURL.createObjectURL(bb.getBlob())
    document.body.appendChild(ifr)
  else
    xhrPost(location.pathname, html)

:@buildDom
  f_global_buttons = &ui.GlobalButtonBox()
  appendChildren(document.body, [#])
    findOrCreate('div', {class: 'itemlist'})
    create('canvas', {class: 'surface'})
    create('canvas', {class: 'stroke_layer'})
    createDiv('draw_cursor')
    svgCreate('svg', {class: 'control_root'})
    createDiv('input_layer')
    create('form', {}, [createDiv('palette_container', [#])])
      createDiv(['tool_palette', 'palette'], [#])
        createDiv('sample_box', [#])
          create('canvas', {class: 'tool_sample'})
          createDiv('sample_size')
        createDiv('tool_lerp')
        createDiv('tool_alpha')
        createDiv('tool_radius')
      createDiv(['color_palette', 'palette'], [#])
        createDiv('color_sel')
        createDiv('box', [#])
          createDiv(['color_sample0', 'color_sample'])
          createDiv(['color_sample1', 'color_sample'])
          createDiv('color_mix')
          createDiv('color_hue')
          createDiv('color_sat')
          createDiv('color_lgt')
        createDiv('color_name')
      createDiv(['item_palette', 'palette'], [#])
        createDiv('box', [#])
          createDiv('item_alpha')
        createDiv(['image_section', 'palette'], [#])
          createDiv('box', [#])
            createDiv('box', [#])
              create('input', {class: 'image_alph_alock', type: 'checkbox'})
              createText('alpha lock')
    createDiv('img_undolist')
    f_global_buttons.element

:'saveHeader
  <!doctype html>
  <html><head>
    <title>Scrawler</title>
    <link rel="stylesheet" href="scrawler.css" type="text/css">
    </head><body>

:'saveFooter
  </body></html>

Entry point.
:
  run_scrawler := ##
    run_as_extension\b\? false
    => &Scrawler(run_as_extension)
