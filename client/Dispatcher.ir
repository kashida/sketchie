::
  @input_layer\Element\ id('input_layer')
  @drag_control\Element\
  @mouse_controls\A\ []
    
  listen(@input_layer, 'mousedown', ##)
    evt\Event\$
    @dispatch('mouseDown', evt)
  listen(@input_layer, 'mousemove', ##)
    evt\Event\$
    @dispatch('mouseMove', evt)
  listen(@input_layer, 'mouseup', ##)
    evt\Event\$
    @dispatch('mouseUp', evt)
  listen(@input_layer, 'mouseout', ##)
    evt\Event\$
    @dispatch('mouseOut', evt)
  listen(@input_layer, 'mousein', ##)
    evt\Event\$
    @dispatch('mouseIn', evt)
  listen(@input_layer, 'resize', ##)
    evt\Event\$
    @dispatch('viewportResize', evt)

  // TODO: replace these two with css rules.
  listen(@input_layer, 'dragstart', ##)
    evt\Event\$
    @cancelEvents(evt)
  listen(@input_layer, 'selectstart', ##)
    evt\Event\$
    @cancelEvents(evt)

  // Capture mouse move and up here for dragging.
  listen(document.body, 'mousemove', ##)
    evt\Event\$
    @dragUpdate(evt)
  listen(document.body, 'mouseup', ##)
    evt\Event\$
    @dragEnd(evt)

:@dispatch
  msg\s\$
  evt\Event\$
  if @mouse_controls.length == 0
    =>
  ctrl := @mouse_controls[@mouse_controls.length - 1]
  if !(msg in ctrl)
    =>
  ctrl[msg](evt)

:@cancelEvents
  evt\Event\$
  evt.preventDefault()
  evt.cancel = true

:dragStart
  control\Element\$
  @drag_control = control
:dragTerminate
  control\Element\$
  @drag_control = null

:@dragUpdate
  evt\Event\$
  if !@drag_control
    =>
  if @drag_control.drag_update
    @drag_control.drag_update(evt)

:@dragEnd
  evt\Event\$
  if !@drag_control
    =>
  if @drag_control.drag_end
    @drag_control.drag_end(evt)
  @drag_control = null

:pushMouseControl
  control\Element\$
  @mouse_controls.push(control)
:popMouseControl
  => @mouse_controls.pop()
:mouseControlLength+\n\
  => @mouse_controls.length
:showCursor
  @input_layer.style.cursor = ''
:hideCursor
  @input_layer.style.cursor = 'none'

:activate
  @input_layer.style.display = 'block'

:deactivate
  @mouse_controls = []
  @input_layer.style.display = 'none'
