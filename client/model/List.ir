::
  @element+\!Element\ dom.id('itemlist')
  dom.eachChild(@element, ##)
    el\!Element\$
    if !el.item
      &%.Item(el)

All child elements need to be blessed when added, and disposed when removed.
:@dispose
  item\!%.Item\$
  @element.removeChild(item.element)
  item.dispose()

:@children\!NodeList\
  => @element.children
:@toItem
  el\Element\$
  => el ? \!%.Item\(el.item) : null

:childrenArray+\!A.<%.Item>\
  arr := []
  dom.eachChild(@element, ##)
    el\Element\$
    arr.push(\!%.Item\(el.item))
  => arr

:first+\%.Item\
  => @toItem(@element.firstElementChild)
:last+\!Element\
  => @toItem(@element.lastElementChild)
:length+\n\
  => @children().length
:isEmpty+\b\
  => @.length == 0
:childAt\%.Item\
  idx\n\$
  => @toItem(@children()[idx])
:indexOf\n\
  item\!%.Item\$
  for i := 0; i < @.length; i++
    if item.hasElement(@children()[i])
      => i
  => -1

:each
  cb\f(!%.Item, !Element)\$
  dom.eachChild(@element, ##)
    el\Element\$
    cb(\!%.Item\(el.item), el)

:until
  back_to_front\b\$
  cb\f(!%.Item):b\$
  c := @children()
  if back_to_front
    for i := 0; i < c.length; i++
      if cb(@toItem(c[i]))
        =>
  else
    for i := c.length - 1; i >= 0; i--
      if cb(@toItem(c[i]))
        =>

Sort the list of input items into z-order.
:zOrder\!A.<!%.Item>\
  items\!A.<!%.Item>\$
  => @.childrenArray.filter(##)
    item\%.Item\$
    => items.indexOf(item) >= 0

:remove
  items\!%.Item|!A.<!%.Item>\$
  if items instanceof %.Item
    @dispose(items)
  else
    items.forEach(##)
      item\!%.Item\$
      @dispose(item)

:insertFirst
  items\A.<!%.Item>\$
  items.forEach(##)
    item\!%.Item\$
    @element.insertBefore(item.element, @element.firstChild)

:appendEnd
  items\!%.Item|!A.<!%.Item>\$
  if items instanceof %.Item
    @element.appendChild(items.element)
  else
    items.forEach(##)
      item\!%.Item\$
      @element.appendChild(item.element)

:insertBefore
  pivot\%.Item\$
  items\!A.<!%.Item>\$
  if pivot
    items.forEach(##)
      item\!%.Item\$
      @element.insertBefore(item.element, pivot.element)
  else
    @.appendEnd(items)

:insertAfter
  pivot\!%.Item\$
  items\!A.<!%.Item>\$
  if pivot.element.nextSibling
    items.forEach(##)
      item\!%.Item\$
      @element.insertBefore(item.element, pivot.element.nextSibling)
  else
    @.appendEnd(items)

:replace
  orig_item\!%.Item\$
  new_item\!%.Item\$
  next := orig_item.element.nextSibling
  @dispose(orig_item)
  if next
    @element.insertBefore(new_item.element, next)
  else
    @element.appendChild(new_item.element)

:top
  handler\F\$
  => @.topIn(@.childrenArray, handler)
:topIn
  items\!A.<!%.Item>\$
  handler\F\$
  top_y := null
  top_item := null
  items.forEach(##)
    item\!%.Item\$
    el := item.element
    if !top_y || el.offsetTop < top_y
      top_y = el.offsetTop
      top_item = item
  if top_item
    handler(top_item, top_y)

:bottom
  handler\F\$
  => @bottomIn(@.childrenArray, handler)
:@bottomIn
  nodes\!A.<!%.Item>\$
  handler\F\$
  bottom_y := null
  bottom_item := null
  nodes.forEach(##)
    item\!%.Item\$
    el := item.element
    if !bottom_y || el.offsetTop > bottom_y
      bottom_y = el.offsetTop
      bottom_item = el
  if bottom_item
    handler(bottom_item, bottom_y)

All the items that are afeter the specified item (exclusive).
:after\A.<!%.Item>\
  item\%.Item\$
  for i := 0; i < @children().length; i++
    if @children()[i] == item.element
      // We can't use array.slice because children is a NodeList.
      list := []
      for j := i + 1; j < @children().length; j++
        list.push(\!%.Item\(@children()[j].item))
      => list
  // item didn't appear in the list.
  => null
