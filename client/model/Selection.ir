::
  // TODO: take item.List as param and use the classes to mark selected items.
  // so we don't need an array here.
  @list+\A.<Element>\ []

:isAny+\b\
  => @list.length > 0
:isEmpty+\b\
  => @list.length == 0
:count+\n\
  => @list.length
:head+\Element\
  => @list.length <= 0 ? null : @list[0]

:isSelected\b\
  item\Element\$
  => #||
    item.classList.contains('selected')
    item.classList.contains('selected_secondary')

:select
  item\Element\$
  push_to_list\b\? false
  if !item || item == @.head
    =>
  if @.isAny
    @.head.className = null
  if push_to_list
    if @.isAny
      @.head.classList.add('selected_secondary')
    if @list.indexOf(item) >= 0
      // Remove the item once.
      @list.splice(@list.indexOf(item), 1)
  else
    // Clean up all the selection from the list.
    each i in @list
      @list[i].className = null
    @list = []
  item.classList.add('selected')
  @list.unshift(item)
  f_item_palette.update()

:add
  item\Element\$
  // Add as a secondary selection.
  if !item || @list.indexOf(item) >= 0
    =>
  if @.isAny
    item.classList.add('selected_secondary')
    @list.push(item)
  else
    item.classList.add('selected')
    @list = [item]
    f_item_palette.update()

:remove
  item\Element\$
  item.className = null
  i := 0
  while i < @list.length
    if @list[i] == item
      @list.splice(i, 1)
      break
    i++
  f_item_palette.update()

:clear
  @list.forEach(##)
    item\Element\$
    item.className = null
  @list = []
  f_item_palette.close()

:isHeadText+\b\
  => @.isAny && @.head.tagName == 'DIV'

:isAllText+\b\
  if !@.isAny
    => false
  => @list.every(##)
    el\Element\$
    => el.tagName == 'DIV'

:isHeadImage+\b\
  => @.isAny && @.head.tagName == 'IMG'

:isAllImage+\b\
  if !@.isAny
    => false
  => @list.every(##)
    el\Element\$
    => el.tagName == 'IMG'
