::
  // Taking the parameter as non-nullable, but the member needs to be nullable
  // for disposing.
  el\Element\? $dom.create('div')
  @element+\Element\ el
  @xform+\\ $dom.Xform(el)
  @isActive&\b\ true
  @alphaLock&\b\ false
  @blendAlpha&\n\ 1.0

  @element.item = @
  @element.dragger = &$drag.Move(@)
  // TODO: unlisten at dispose.
  $dom.listen(@element, 'click', ##)
    evt\Event\$
    if @.selectable() && !evt.ctrlKey
      f_page.selection.select(@, evt.shiftKey)

:create = ##
  \~\
  el\Element\$
  => el.firstChild.tagName == 'IMG' ? &~Image(el) : &~Text(el)

:serializable+\O\
  => {}

:baseSerializable+\O\
  => {#}
    p: @xform.position.serializable
    r: @xform.rotation
    s: @xform.scale
    a: @alphaLock
    b: @blendAlpha
    c: @isActive

:createFromObj = ##
  \~\
  obj\O\$
  item := ~Image.createFromObj(obj)
  if !item
    item = ~Text.createFromObj(obj)
  item.xform.position = $data.Vec2.createFromObj(obj.p)
  item.xform.rotation = obj.r
  item.xform.scale = obj.s
  item.alphaLock = obj.a
  item.blendAlpha = obj.b
  item.isActive = obj.c
  => item

:createFromElement = ##
  \~\
  element\Element\$
  item := ~Image.createFromElement(element)
  if !item
    item = ~Text.createFromElement(element)
  item.xform.loadFromElement(element)
  item.alphaLock = !!$dom.attr(element, 'sk_alpha_lock')
  alpha := $dom.attr(element, 'sk_blend_alpha')
  if alpha
    alpha_value := parseFloat(alpha)
    if alpha_value >= 0 && alpha_value <= 1.0
      item.blendAlpha = alpha_value
  => item

:freeze
  @xform.freeze()
  if @alphaLock
    $dom.setAttr(@element, 'sk_alpha_lock', 'true')
  if @blendAlpha != 1
    $dom.setAttr(@element, 'sk_blend_alpha', @blendAlpha.toString())

:restore
  @xform.restore()
  $dom.setAttr(@element, 'sk_alpha_lock')
  $dom.setAttr(@element, 'sk_blend_alpha')

:dispose = ##
  target\O\$
  target._element.item = null
  target._element.dragger = null
  target._element = null
  target._xform = null

Returns Item only if the element has an Item associated to it.
:fromElement = ##
  \~\
  el\Element\$
  => \~\(el.item)

:hasElement\b\
  el\Element\$
  => el == @element

:selectable\b\
  => @isActive

:focus
  @element.focus()

:isPointerEventTarget*
  val\b\$
  @element.style['pointer-events'] = val ? null : 'none'

:opacity*
  val\n\$
  @element.style.opacity = val
