::< %.Stroke
  @prev_x\n?\
  @prev_y\n?\
  ^()

:reset
  color\data.Color\$
  radius\n\$
  lerp\n\$
  alpha_lock\b\$
  ^(color, radius, lerp, alpha_lock)
  @prev_x = @prev_y = null

:draw
  x\n\$
  y\n\$
  if !@prev_x || !@prev_y
    @prev_x = x
    @prev_y = y
    =>
  ctx := f_surface.context
  src := ctx.getImageData(#)
    @prev_x - @.radius
    @prev_y - @.radius
    @.radius * 2
    @.radius * 2
  dst := ctx.getImageData(#)
    x - @.radius
    y - @.radius
    @.radius * 2
    @.radius * 2
  avg := ##
    idx\n\$
    f\n\$
    sval := src.data[idx]
    dval := dst.data[idx]
    valmod := @.color.a * dval + (1.0 - @.color.a) * sval
    if f != 1.0
      valmod = f * valmod + (1.0 - f) * dval
    dst.data[idx] = inrange(0, 255, valmod)
  @.inCircle(dst.width, @.radius, ##)
    base\n\$
    f\n\$
    if src.data[base + 3] > 0
      if @.alphaLock
        // Never modify alpha, and modify color only if the target alpha is
        // non-zero.
        if dst.data[base + 3] > 0
          [0, 1, 2].forEach(##)
            i\n\$
            avg(base + i, f)
      else
        [0, 1, 2, 3].forEach(##)
          i\n\$
          avg(base + i, f)
  ctx.putImageData(dst, x - @.radius, y - @.radius)
  @prev_x = x
  @prev_y = y
