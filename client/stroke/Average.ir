::< %.Stroke
  ^()

:draw
  x\n\$
  y\n\$
  ctx := f_surface.context
  pixels := ctx.getImageData(x - @.radius, y - @.radius, @.radius * 2, @.radius * 2)
  avg := [0.0, 0.0, 0.0, 0.0]
  weight_sum := 0.0
  @.inCircle(pixels.width, @.radius, ##)
    base\n\$
    f\n\$
    a := pixels.data[base + 3]
    [0, 1, 2, 3].forEach(##)
      i\n\$
      avg[i] += pixels.data[base + i] * f * a
    weight_sum += f * a
  [0, 1, 2, 3].forEach(##)
    i\n\$
    avg[i] /= weight_sum
  @.inCircle(pixels.width, @.radius, ##)
    base\n\$
    f\n\$
    if @.alphaLock
      // Never modify alpha, and modify color only if the target alpha is
      // non-zero.
      if pixels.data[base + 3] > 0
        [0, 1, 2].forEach(##)
          i\n\$
          val := pixels.data[base + i]
          valmod := @.color.a * avg[i] + (1.0 - @.color.a) * val
          if f != 1.0
            valmod = f * valmod + (1.0 - f) * val
          pixels.data[base + i] = inrange(0, 255, valmod)
    else
      [0, 1, 2, 3].forEach(##)
        i\n\$
        val := pixels.data[base + i]
        valmod := @.color.a * avg[i] + (1.0 - @.color.a) * val
        if f != 1.0
          valmod = f * valmod + (1.0 - f) * val
        pixels.data[base + i] = inrange(0, 255, valmod)
  ctx.putImageData(pixels, x - @.radius, y - @.radius)
