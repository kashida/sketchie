::< %.Stroke
  @points\A.<data.Point>\ []
  ^()

:reset
  color\A\$
  radius\n\$
  lerp\n\$
  alpha_lock\b\$
  ^(color, radius, lerp, alpha_lock)
  @points = []

:draw
  x\n\$
  y\n\$
  @points.push(&data.Point(x, y))
  if @points.length < 2
    =>
  ctx := f_stroke_layer.ctx
  ctx.strokeStyle = @c.rgb
  ctx.lineWidth = @r * 2
  ctx.lineCap = 'round'
  ctx.lineJoin = 'round'

  p0 := @points[@points.length - 2]
  p1 := @points[@points.length - 1]
  ctx.beginPath()
  ctx.moveTo(p0.x, p0.y)
  ctx.lineTo(p1.x, p1.y)
  ctx.stroke()

:blit
  if @points.length < 0
    =>
  ctx := f_surface.ctx
  ctx.strokeStyle = @c.rgba
  ctx.lineWidth = @r * 2
  ctx.lineCap = 'round'
  ctx.lineJoin = 'round'
  ctx.beginPath()
  i := 0
  while i < @points.length
    p := @points[i++]
    if i == 1
      // First point.
      ctx.moveTo(p.x, p.y)
    else if i < @points.length
      // Still have two or more points. Draw a quadratic curve.
      end_p := @points[i++]
      ctx.quadraticCurveTo(p.x, p.y, end_p.x, end_p.y)
    else
      // There's only one more left.  draw a line.
      ctx.lineTo(p.x, p.y)
  ctx.stroke()
