Convenience wrapper for the html canvas.
::
  @element+\HTMLCanvasElement\$
  @ctx+\CanvasRenderingContext2D\ \CanvasRenderingContext2D\(#)
    @element.getContext('2d')
  @scale\n\ 1.0

:fromSize = ##
  w\n\$
  h\n\$
  e := ~create('canvas')
  e.width = w
  e.height = h
  => &~(e)

:opacity*
  val\s|n|-\$
  @element.style.opacity = val

:show
  @element.style.display = 'block'

:hide
  @element.style.display = 'none'

:clear
  @ctx.clearRect(0, 0, @element.width, @element.height)

:dataUrl
  => @element.toDataURL()

This resets the canvas context, so it has to be done as soon as canvas size
is determined.
TODO: Make it a private method.
:scale*
  @scale = value
  @element.width = @element.clientWidth / @scale
  @element.height = @element.clientHeight / @scale

:pixelData+\$pixel.Data\
  => &$pixel.Data(@ctx.getImageData(0, 0, @element.width, @element.height))

:duplicate\HTMLCanvasElement\
  cvs := ~create('canvas')
  cvs.width = @element.width
  cvs.height = @element.height
  cvs.getContext('2d').putImageData(@.pixelData.pixels, 0, 0)
  => cvs

:copyFrom
  cvs\HTMLCanvasElement\$
  @ctx.putImageData(cvs.getContext('2d').getImageData(#), 0, 0)
    0
    0
    @element.width
    @element.height

:setToWindowSize
  @element.style.width = window.innerWidth + 'px'
  @element.style.height = window.innerHeight + 'px'
  // TODO: Find another way to set canvas's width / height (and maybe drop
  // canvas scaling.
  @.scale = 1.0

:setToRect
  r\$data.Rect\$
  @element.style.left = r.x0 + 'px'
  @element.style.top = r.y0 + 'px'
  @element.style.width = r.w + 'px'
  @element.style.height = r.h + 'px'
  // TODO: Find another way to set canvas's width / height (and maybe drop
  // canvas scaling.
  @.scale = 1.0

:detach
  @element.parentNode.removeChild(@element)
  @element.style.position = ''
  @element.style.width = ''
  @element.style.height = ''
  @element.style.left = ''
  @element.style.top = ''
