::id = ##
  str\s\$
  el\Element\? document
  => el.getElementsByClassName(str)[0]

::create = ##
  tag\s\$
  attrs\O\?
  children\A.<Element>\?
  elem := document.createElement(tag)
  if attrs
    each attr in attrs
      elem.setAttribute(attr, attrs[attr])
  if children
    children.forEach(##)
      child\Element\$
      elem.appendChild(child)
  => elem

::createDiv = ##
  cls\s|A.<s>\$
  children\A.<Element>\?
  div := %.create('div', null, children)
  if cls instanceof Array
    cls.forEach(##)
      c\s\$
      div.classList.add(c)
  else
    div.classList.add(cls)
  => div

::createText = ##
  str\s\$
  => document.createTextNode(str)

::svgCreate = ##
  \Element\
  tag\s\$
  attrs\O\?
  children\A.<Element>\?
  ns := 'http://www.w3.org/2000/svg'
  elem := document.createElementNS(ns, tag)
  if attrs
    each attr in attrs
      elem.setAttribute(attr, attrs[attr])
  if children
    children.forEach(##)
      child\Element\$
      elem.appendChild(child)
  => elem

::svgCreateText = ##
  \Element\
  text\s\$
  attrs\O\?
  elem := %.svgCreate('text', attrs)
  dom.appendChildren(elem, [document.createTextNode(text)])
  => elem

::nodeText = ##
  el\Element\$
  if el.nodeType == Node.ELEMENT_NODE
    => el.innerText
  else
    // Assume it's a text node.
    => el.nodeValue

::appendChildren = ##
  parent\Element\$
  children\A.<Node>\$
  children.forEach(##)
    child\Node\$
    parent.appendChild(child)

::findOrCreate = ##
  tag\s\$
  attrs\O\$
  children\A.<Element>\?
  if attrs['class']
    elem := %.id(attrs['class'])
    if elem
      elem.parentNode.removeChild(elem)
      => elem
  elem = %.create(tag, attrs, children)
  => elem

::listen = ##
  elem\Element\$
  type\s\$
  listener\F\$
  capture\b\? false
  elem.addEventListener(type, listener, capture)

::unlisten = ##
  elem\Element\$
  type\s\$
  listener\F\$
  capture\b\? false
  elem.removeEventListener(type, listener, capture)

::attr = ##
  el\Element\$
  name\s\$
  => el.getAttribute(name)
::setAttr = ##
  el\Element\$
  name\s\$
  value\s\?
  if value !== undefined
    el.setAttribute(name, value)
  else
    el.removeAttribute(name)

::isAttr = ##
  el\Element\$
  name\s\$
  a := %.attr(el, name)
  if !a
    => false
  => a == '1' || a == 'true'
::setIsAttr = ##
  el\Element\$
  name\s\$
  value\b\$
  if value
    el.setAttribute(name, 'true')
  else
    el.removeAttribute(name)
        
::elemPosition = ##
  \data.Vec2\
  elem\Element\$
  => &data.Vec2(elem.offsetLeft, elem.offsetTop)
TODO: drop this and use elemRect.
::elemPositionBR = ##
  \data.Vec2\
  elem\Element\$
  // Bottom right corner coordinate.
  => &data.Vec2(#)
    elem.offsetLeft + elem.offsetWidth
    elem.offsetTop + elem.offsetHeight
::elemRect = ##
  \!data.Rect\
  elem\!Element\$
  => &data.Rect(#)
    elem.offsetLeft
    elem.offsetTop
    elem.offsetLeft + elem.offsetWidth
    elem.offsetTop + elem.offsetHeight
::overlapWithAny = ##
  item\Element\$
  regions\A.<Element>\$
  => regions.some(##)
    r\Element\$
    // TODO: consider rotation and scaling.
    x := item.offsetLeft
    y := item.offsetTop
    w := item.offsetWidth
    h := item.offsetHeight
    rx := r.offsetLeft
    ry := r.offsetTop
    rw := r.offsetWidth
    rh := r.offsetHeight
    => x + w > rx && x < rx + rw && y + h > ry && y < ry + rh

::eachChild = ##
  el\!Element\$
  cb\f(!Element,n)\$
  for i := 0; i < el.childNodes.length; i++
    cb(el.childNodes[i], i)
