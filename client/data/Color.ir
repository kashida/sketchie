::
  // All in [0, 1] range.
  @r&\n\$
  @g&\n\$
  @b&\n\$
  @a&\n\? 1

String representations for CSS use.
:rgba+\s\
  => 'rgba(' + [#].join(',') + ')'
    @.intR
    @.intG
    @.intB
    @.a
:rgb+\s\
  => 'rgb(' + [#].join(',') + ')'
    @.intR
    @.intG
    @.intB

:intR+\n\
  => inrange(0, 255, Math.floor(@.r * 256))

:intG+\n\
  => inrange(0, 255, Math.floor(@.g * 256))

:intB+\n\
  => inrange(0, 255, Math.floor(@.b * 256))

:withAlpha\~\
  alpha\n\$
  => &~(@.r, @.g, @.b, alpha)

:hsl+\~Hsl\
  max_rgb := maxAll([@.r, @.g, @.b])
  min_rgb := minAll([@.r, @.g, @.b])
  c := max_rgb - min_rgb
  l := (max_rgb + min_rgb) / 2
  if c == 0
    h := 0
  else if @.r >= @.g && @.r >= @.b
    h = (@.g - @.b) / c
  else if @.g >= @.r && @.g >= @.b
    h = (@.b - @.r) / c + 2
  else
    h = (@.r - @.g) / c + 4
  if h < 0
    h += 6
  s := c == 0 ? 0 : c / (1 - Math.abs(max_rgb + min_rgb - 1))
  => &~Hsl(h, s, l)

:array+\A<n>\
  => [@.r, @.g, @.b, @.a]

Creates Color object from rgba values in [0, 255] range.
:fromByteRange = ##
  \~\
  r\n\$
  g\n\$
  b\n\$
  a\n\? 255
  => &~(#)
    inrange(0, 255, r) / 255.0
    inrange(0, 255, g) / 255.0
    inrange(0, 255, b) / 255.0
    inrange(0, 255, a) / 255.0

Convert hexadecimal color code, e.g. FFFFFF to the rgb color value.
:fromHexString = ##
  \~\
  hex\s\$
  => ~.fromByteRange(#)
    parseInt(hex.substr(0, 2), 16)
    parseInt(hex.substr(2, 2), 16)
    parseInt(hex.substr(4, 2), 16)
