::
  @x&\n\$
  @y&\n\$

:str+\s\
  => JSON.stringify(@.serializable)

:fromStr = ##
  \~\
  str\s\$
  => ~.createFromObj(\A<n>\(JSON.parse(str)))

:clone+\~\
  => &~(@x, @y)

:serializable+\O\
  => [@x, @y]

:createFromObj = ##
  \~\
  list\A<n>\$
  => &~(list[0], list[1])

:minus\~\
  other\~\$
  => &~(@x - other.x, @y - other.y)

:plus\~\
  other\n|~\$
  if other instanceof ~
    => &~(@x + other.x, @y + other.y)
  else
    => &~(@x + other, @y + other)

:plus2n\~\
  other_x\n\$
  other_y\n\$
  => &~(@x + other_x, @y + other_y)

:mult\~\
  s\n\$
  => &~(@.x * s, @y * s)

:div\~\
  s\n\$
  => &~(@x / s, @y / s)

:rotate\~\
  // In radian.
  r\n\$
  s := Math.sin(r)
  c := Math.cos(r)
  => &~(@x * c - @y * s, @x * s + @y * c)
