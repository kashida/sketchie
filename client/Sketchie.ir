::
  @buildDom()
  @initGlobalComponents()

TODO: Move dom building to template.
Works for extension too if statically built and linked.
:@buildDom
  f_global_actions = &action.GlobalSet()
  f_selection_actions = &action.SelectionSet()
  f_selection_marker = &ui.SelectionMarker()
  f_mode_indicator = &ui.ModeIndicator()
  f_file_dialog = &ui.FileDialog()
  dom.appendChildren(document.body, [#])
    f_selection_marker.element
    dom.findOrCreate('div', {class: 'itemlist'})
    dom.createDiv('draw_cursor')
    dom.svgCreate('svg', {class: 'control_root'})
    dom.createDiv('input_layer')
    dom.createDiv('palette_container', [#])
      dom.createDiv(['tool_palette', 'palette'], [#])
        dom.createDiv('sample_box', [#])
          dom.create('canvas', {class: 'tool_sample'})
          dom.createDiv('sample_size')
        dom.createDiv('tool_lerp')
        dom.createDiv('tool_alpha')
        dom.createDiv('tool_radius')
      dom.createDiv(['color_palette', 'palette'], [#])
        dom.createDiv('color_sel')
        dom.createDiv('box', [#])
          dom.createDiv(['color_sample0', 'color_sample'])
          dom.createDiv(['color_sample1', 'color_sample'])
          dom.createDiv('color_mix')
          dom.createDiv('color_hue')
          dom.createDiv('color_sat')
          dom.createDiv('color_lgt')
        dom.createDiv('color_name')
      dom.createDiv(['item_palette', 'palette'], [#])
        dom.createDiv('box', [#])
          dom.createDiv('item_alpha')
        dom.createDiv(['image_section', 'palette'], [#])
          dom.createDiv('box', [#])
            dom.createDiv('box', [#])
              dom.create('input', {class: 'image_alph_alock', type: 'checkbox'})
              dom.createText('alpha lock')
    dom.createDiv('img_undolist')
    f_mode_indicator.element
    f_global_actions.element
    f_selection_actions.element
    f_file_dialog.element

:@initGlobalComponents
  f_sketchie = this
  f_viewport = &ui.Viewport()
  f_page = &model.Page()
  f_z_order = &model.ZOrder()
  f_surface = &ui.Surface(dom.create('canvas', {class: 'surface'}))
  f_stroke_layer = &ui.Surface(dom.create('canvas', {class: 'stroke_layer'}))
  f_color_palette = &palette.Color()
  f_tool_palette = &palette.Tool()
  f_item_palette = &palette.Item()
  f_cursor = &ui.Cursor()
  f_fs = &fs.SyncFs()

  f_editor_modes = &editor.Modes('l', {#})
    'l': &editor.List()
    't': &editor.Text()
    //'r': &editor.Rotate()
    //'q': &editor.Scale()
    'd': &editor.Draw()
    //'s': &editor.Stencil()
  f_dispatcher = &dispatch.Mouse()
  &dispatch.Key()
  f_hex_control = &ui.HexControl()
  f_strokes = &stroke.Set()
  f_selection_marker.init()
  f_selection_actions.init()
  f_mode_indicator.init()
