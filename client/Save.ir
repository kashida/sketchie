::

:json+\!Blob\
  => JSON.stringify(f_page.list.serializable)

:jsonBlob+\!Blob\
  => &Blob([@.json], {type: 'application/json'})

:html+\s\
  // TODO: Freeze / restore items one by one and stream them so we don't need to
  // hold the html text coyp of the entire document in memory.
  f_page.freeze()
  page := Templates.page({#})
    editor: false
    script: ''
    init: ''
    contents: #+
      '<div class="itemlist">'
      dom.id('itemlist').innerHTML
      '</div>\n'
  f_page.restore()
  => page

:htmlBlob+\!Blob\
  => &Blob([@.html], {type: 'text/html'})

:store
  // Send everything in the item list.
  if run_as_extension
    //@storeToSyncFs(@.jsonBlob, 'sketchie.sktch')
    //@storeToSyncFs(@.htmlBlob, 'sketchie.html')
    @storeToSyncFs(@.htmlBlob)
  else
    xhrPost(location.pathname.replace(#), @.json)
      /\.html$/i
      '.sktch'
    xhrPost(location.pathname, @.html)

:exportLocal
  chrome.fileSystem.chooseEntry({type: 'saveFile'}, ##)
    entry\Entry\?
    if entry
      entry.createWriter(##, @err)
        writer\FileWriter\$
        writer.onerror = @writererr
        writer.onwriteend = ##
          // TODO: show some on-screen response.
          l('write complete')
        writer.write(@.htmlBlob)

Sync to local file system -- currently not used.
:@storeToFs
  chrome.fileSystem.chooseEntry({type: 'openFile'}, ##)
    entry\Entry\?
    if entry
      entry.file(##)
        file\!File\$
        reader := &FileReader()
        reader.onerror = @writererr
        reader.onloadend = ##
          e\Event\$
          l(e.target.result)
        l(reader.readAsText(file))

:@storeToSyncFs
  data\!Blob\$
  fname\s\?
  chrome.syncFileSystem.requestFileSystem(##)
  //webkitRequestFileSystem(window.PERSISTENT, 5 * 1024 * 1024, ##, @err)
    fs\FileSystem\$
    //chrome.syncFileSystem.getUsageAndQuota(fs, ##)
    //  info\O\$
    //  l(info)
    if fname
      @saveToFile(fs, data, fname)
    else
      @saveWithDialog(fs, data)

:@saveToFile
  fs\FileSystem\$
  data\!Blob\$
  fname\s\$
  fs.root.getFile(fname, {create: true}, ##, @err)
    entry\FileEntry\$
    entry.createWriter(##, @err)
      writer\FileWriter\$
      writer.onerror = @writererr
      writer.onwriteend = ##
        if writer.length == 0
          writer.write(data)
          User.storeFileName(fname)
      writer.truncate(0)


:@saveWithDialog
  fs\FileSystem\$
  data\!Blob\$
  fs.root.createReader().readEntries(##, @err)
    entries\!A.<!Entry>\$
    files := []
    for  i := 0; i < entries.length; ++i
      if entries[i].isFile
        files.push(entries[i].name)
    files.sort()

    User.fileName(##)
      default_file_name\s\$
      f_file_dialog.save(##, default_file_name, files)
        fname\?string\$
        fname && @saveToFile(fs, data, fname)

:@writererr
  e\ProgressEvent\$
  l('Writer error')
  l(e)

:@err
  e\FileError\$
  l('Save error')
  l(e)
